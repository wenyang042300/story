def merge_sort(li): #（分组）
    if len(li) == 1:
        return li
    mid = len(li) // 2 #取拆分的中间位置
    left = li[:mid]   # 左侧子串
    right = li[mid:]   # 右侧子串
    # 对拆分过后的左右子串再拆分，直到只有一个元素为止
    ll = merge_sort(left)
    rl =merge_sort(right)
    return merge(ll,rl)
def merge(left,right):     # 排序and合并
    result = []
    while len(left)>0 and len(right)>0:
        # 为了保持稳定性，当遇到相等的时候优先把左侧的数放进结果列表，因为left本来也是大数列中比较靠左的
        if left[0] <= right[0]:
            result.append(left.pop(0)) #left.pop(0)为删除的项，将其添加到result列表末尾
        else:
            result.append(right.pop(0))
    # while循环出来之后 说明其中一个数组没有数据了，我们把另一个数组添加到结果数组后面
    result += left
    result += right
    return result
print(merge_sort([5,4,3,2,1]))

"""
    [5,4,3,2,1] 
    第一次拆分==》[5,4]、 [3,2,1] 
    第二次拆分==》[5]、[4]、 [3]、[2,1] 
    第三次拆分==》[5]、[4]、[3]、[2]、[1]
merge(left,right)——>([5] [4])，([2] [1])，([3] [1, 2])，([4, 5] [1, 2, 3])
    [5][4] # 第二次分组的结果
    [4]                   #比较后，提出右边分组的第一个数字[4]，放进result中
    [4, 5]                #比较后，再将左边分组[5]赋值给result（左边结果的最后一次的分组排序完成）
    [2][1]  # 第三次分组的结果
    [1]                   #比较后，提出右边分组的第一个数字[1]，放进result中
    [1, 2]                #比较后，再将左边分组[2]赋值给result（右边边结果的最后一次的分组排序完成）
    [3][1, 2]  #[1, 2]已经排序并绑定
    [1]                   #比较后，提出右边分组的第一个数字[1]，放进result中
    [1, 2]                #比较后，提出右边分组的第一个数字[2]，放进result中
    [1, 2, 3]             #比较后，再将左边分组[3]赋值给result（右边边结果的第二次的分组排序完成）
    [4, 5][1, 2, 3]
    [1]                   #比较后，提出右边分组的第一个数字[1]，放进result中
    [1, 2]                #比较后，提出右边分组的第一个数字[2]，放进result中
    [1, 2, 3]             #比较后，提出右边分组的第一个数字[3]，放进result中
    [1, 2, 3, 4, 5]       #比较后，再将左边分组[4][5]赋值给result（最后为第一次分组的排序完成）
"""
