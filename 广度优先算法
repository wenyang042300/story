import java.util.LinkedList;
import java.util.Queue;
 
class GraphBFS {
    private int V; // 节点数
    private LinkedList<Integer>[] adj; // 邻接表
 
    public GraphBFS(int vertices) {
        V = vertices;
        adj = new LinkedList[V];
        for (int i = 0; i < V; i++) {
            adj[i] = new LinkedList<>();
        }
    }
 
    // 添加边
    public void addEdge(int v, int w) {
        adj[v].add(w);
    }
 
    void BFS(int start) {
        boolean[] visited = new boolean[V];
        Queue<Integer> queue = new LinkedList<>();
 
        visited[start] = true;
        queue.add(start);
 
        while (!queue.isEmpty()) {
            int v = queue.poll();
            System.out.print(v + " ");
 
            for (int neighbor : adj[v]) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    queue.add(neighbor);
                }
            }
        }
    }
 
    public static void main(String[] args) {
        GraphBFS graph = new GraphBFS(7);
        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 3);
        graph.addEdge(1, 4);
        graph.addEdge(2, 5);
        graph.addEdge(2, 6);
 
        System.out.println("广度优先遍历:");
        graph.BFS(0);
    }
}
 
public class BFSSearchExample {
    public static void main(String[] args) {
        GraphBFS graph = new GraphBFS(7);
        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 3);
        graph.addEdge(1, 4);
        graph.addEdge(2, 5);
        graph.addEdge(2, 6);
 
        System.out.println("广度优先遍历:");
        graph.BFS(0);
    }
}
